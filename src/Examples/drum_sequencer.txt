//4 lane drum sequencer

//gui setup
let num_pads = 8
let gui2 = new p5(sketch, Canvas);
gui2.createCanvas(700,200);
let noteToggles_1 = [];
let noteOn_1 = [true, true, true, true, true, true, true, true]; 
for (let i = 0; i < num_pads; i++) {
  noteToggles_1.push(gui2.Toggle({
    callback: function (x) {
      noteOn_1[i] = x == 0 ? false : true;  // Toggle noteOn for the sequence
    },
    label: " ",
    x: 11 + 11*i,  // Position the toggle switches
    y: 11,
    border: 10,
    borderColor: [128,0,128],
    size: .7
  }));
  noteToggles_1[i].set(0);  // Default all to "off"
}
let noteOn_2 = [true, true, true, true, true, true, true, true];  // toggle states for sequence steps
let noteToggles_2 = [];
for (let i = 0; i < num_pads; i++) {
  noteToggles_2.push(gui2.Toggle({
    callback: function (x) {
      noteOn_2[i] = x == 0 ? false : true; 
    },
    label: " ",
    x: 11 + 11*i, 
    y: 35,
    border: 10,
    borderColor: [255,0,0],
    size: .7
  }));
  noteToggles_2[i].set(0);  // default all to "on"
}
let noteOn_3 = [true, true, true, true, true, true, true, true]; 
let noteToggles_3 = [];
for (let i = 0; i < num_pads; i++) {
  noteToggles_3.push(gui2.Toggle({
    label: " ", 
    callback: function (x) {
      noteOn_3[i] = x == 0 ? false : true; 
    },
    label: " ",
    x: 11 + 11*i, 
    y: 35+24,
    border: 10,
    borderColor: [0,128,0],
    size: .7
  }));
  noteToggles_3[i].set(0);  // default all to "off"
}
let noteOn_4 = [true, true, true, true, true, true, true, true]; 
let noteToggles_4 = [];
for (let i = 0; i < num_pads; i++) {
  noteToggles_4.push(gui2.Toggle({
    callback: function (x) {
      noteOn_4[i] = x == 0 ? false : true; 
    },
    label: " ",
    x: 11 + 11*i, 
    y: 35+24*2,
    border: 10,
    borderColor: [0,0,255],
    size: .7
  }));
  noteToggles_4[i].set(0);  // default all to "off"
}
function changeLedColor(colorIndex, on){
  console.log(colorIndex);
  let message = 0;
  let output = null;
  if(on){
    message = [0x90 | 0, colorIndex, 127];
    output = midi.midi.outputs.get("output-2");
    output.send(message)
    message = [0x90 | 1, colorIndex, 127];
    output = midi.midi.outputs.get("output-2");
    output.send(message)
    console.log("sent on msg");
  }else{
    message = [0x80 | 0, colorIndex, 127];
    output = midi.midi.outputs.get("output-2");
    output.send(message)
    message = [0x80 | 1, colorIndex, 127];
    output = midi.midi.outputs.get("output-2");
    output.send(message)
    console.log("sent off msg");
  }
}

setMidiInput(2);

//synth setup
const sampler = new DrumSampler()
const output = new Tone.Multiply(.1).toDestination()
const verb = new Diffuseur()
sampler.connect(output)

let noteOns = [noteOn_1, noteOn_2, noteOn_3, noteOn_4];
let noteToggles = [noteToggles_1, noteToggles_2, noteToggles_3, noteToggles_4];
let symbols = ['O', 'X', '^', '2'];
let cur_lane = 0;
changeLedColor(cur_lane, true);


setNoteOnHandler( (note,vel)=>{
  if (note == 9){
      cur_lane = (cur_lane+3)%4;
      changeLedColor(cur_lane, true);
  }
  else if (note == 10){
      cur_lane = (cur_lane+1)%4;
      changeLedColor(cur_lane, true);
  }
  else if (note >= 0 && note < 8){
      noteOns[cur_lane][note%60] = !noteOns[cur_lane][note%60];
      noteToggles[cur_lane][note%60].set(noteOns[cur_lane][note%60] ? 1 : 0);
      sampler.sequence(noteOns[cur_lane].map(value => (value ? symbols[cur_lane] : '.')).join(''), '4n', cur_lane);
  }
})
setNoteOffHandler((note, vel)=>{
  return;
})
